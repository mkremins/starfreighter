{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{update}, :name clojure.math.combinatorics, :imports nil, :requires nil, :uses nil, :defs {+' {:name clojure.math.combinatorics/+', :file "target/app/clojure/math/combinatorics.cljc", :line 82, :column 10, :end-line 82, :end-column 17, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 82, :column 15, :end-line 82, :end-column 17}}, expt-int {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 502, :column 8, :end-line 502, :end-column 16, :private true, :arglists (quote ([base pow]))}, :private true, :name clojure.math.combinatorics/expt-int, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 16, :method-params ([base pow]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 502, :end-line 502, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base pow]))}, permutation-index-duplicates {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 604, :column 8, :end-line 604, :end-column 36, :private true, :arglists (quote ([l]))}, :private true, :name clojure.math.combinatorics/permutation-index-duplicates, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 36, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 604, :end-line 604, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, nth-combination {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 556, :column 7, :end-line 556, :end-column 22, :arglists (quote ([items t n])), :doc "The nth element of the sequence of t-combinations of items"}, :name clojure.math.combinatorics/nth-combination, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 22, :method-params ([items t n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 556, :end-line 556, :max-fixed-arity 3, :fn-var true, :arglists (quote ([items t n])), :doc "The nth element of the sequence of t-combinations of items"}, partitions {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 906, :column 7, :end-line 906, :end-column 17, :arglists (quote ([items & args])), :doc "All the lexicographic distinct partitions of items.\n    Optionally pass in :min and/or :max to specify inclusive bounds on the number of parts the items can be split into.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items args)], :arglists ([items & args]), :arglists-meta (nil)}}, :name clojure.math.combinatorics/partitions, :variadic true, :file "target/app/clojure/math/combinatorics.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items args)], :arglists ([items & args]), :arglists-meta (nil)}, :method-params [(items args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 906, :end-line 906, :max-fixed-arity 1, :fn-var true, :arglists ([items & args]), :doc "All the lexicographic distinct partitions of items.\n    Optionally pass in :min and/or :max to specify inclusive bounds on the number of parts the items can be split into."}, all-different? {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 84, :column 8, :end-line 84, :end-column 22, :private true, :arglists (quote ([s])), :doc "Annoyingly, the built-in distinct? doesn't handle 0 args, so we need\nto write our own version that considers the empty-list to be distinct"}, :private true, :name clojure.math.combinatorics/all-different?, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Annoyingly, the built-in distinct? doesn't handle 0 args, so we need\nto write our own version that considers the empty-list to be distinct"}, nth-permutation-duplicates {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 401, :column 8, :end-line 401, :end-column 34, :private true, :arglists (quote ([l n])), :doc "Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"}, :private true, :name clojure.math.combinatorics/nth-permutation-duplicates, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 34, :method-params ([l n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 401, :end-line 401, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l n])), :doc "Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"}, count-permutations-from-frequencies {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 340, :column 8, :end-line 340, :end-column 43, :private true, :arglists (quote ([freqs]))}, :private true, :name clojure.math.combinatorics/count-permutations-from-frequencies, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 43, :method-params ([freqs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([freqs]))}, nth-combination-freqs {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 539, :column 8, :end-line 539, :end-column 29, :private true, :arglists (quote ([freqs t n])), :doc "The nth element of the sequence of t-combinations of the multiset\nrepresented by freqs"}, :private true, :name clojure.math.combinatorics/nth-combination-freqs, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 29, :method-params ([freqs t n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 539, :end-line 539, :max-fixed-arity 3, :fn-var true, :arglists (quote ([freqs t n])), :doc "The nth element of the sequence of t-combinations of the multiset\nrepresented by freqs"}, partitions-M {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 880, :column 8, :end-line 880, :end-column 20, :private true, :arglists (quote ([items & {from :min, to :max}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items {from :min, to :max})], :arglists ([items & {from :min, to :max}]), :arglists-meta (nil)}}, :private true, :name clojure.math.combinatorics/partitions-M, :variadic true, :file "target/app/clojure/math/combinatorics.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items {from :min, to :max})], :arglists ([items & {from :min, to :max}]), :arglists-meta (nil)}, :method-params [(items {from :min, to :max})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 880, :end-line 880, :max-fixed-arity 1, :fn-var true, :arglists ([items & {from :min, to :max}])}, nth-permutation {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 419, :column 7, :end-line 419, :end-column 22, :arglists (quote ([items n])), :doc "(nth (permutations items)) but calculated more directly."}, :name clojure.math.combinatorics/nth-permutation, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 22, :method-params ([items n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 419, :end-line 419, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items n])), :doc "(nth (permutations items)) but calculated more directly."}, remove-nth {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 316, :column 8, :end-line 316, :end-column 18, :private true, :arglists (quote ([l n]))}, :private true, :name clojure.math.combinatorics/remove-nth, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 18, :method-params ([l n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 316, :end-line 316, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l n]))}, n-take-k {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 463, :column 8, :end-line 463, :end-column 16, :private true, :arglists (quote ([n k]))}, :private true, :name clojure.math.combinatorics/n-take-k, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 16, :method-params ([n k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 463, :end-line 463, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n k]))}, permutation-index-distinct {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 596, :column 8, :end-line 596, :end-column 34, :private true, :arglists (quote ([l]))}, :private true, :name clojure.math.combinatorics/permutation-index-distinct, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 34, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 596, :end-line 596, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, partitions-H {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 729, :column 8, :end-line 729, :end-column 20, :private true, :arglists (quote ([items & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items args)], :arglists ([items & args]), :arglists-meta (nil)}}, :private true, :name clojure.math.combinatorics/partitions-H, :variadic true, :file "target/app/clojure/math/combinatorics.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(items args)], :arglists ([items & args]), :arglists-meta (nil)}, :method-params [(items args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 729, :end-line 729, :max-fixed-arity 1, :fn-var true, :arglists ([items & args])}, growth-strings-H {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 659, :column 8, :end-line 659, :end-column 24, :private true, :arglists (quote ([n r s] [n a b r s])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([n r s] [n a b r s]), :arglists ([n r s] [n a b r s]), :arglists-meta (nil nil)}}, :private true, :name clojure.math.combinatorics/growth-strings-H, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([n r s] [n a b r s]), :arglists ([n r s] [n a b r s]), :arglists-meta (nil nil)}, :method-params ([n r s] [n a b r s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 659, :end-line 659, :max-fixed-arity 5, :fn-var true, :arglists ([n r s] [n a b r s])}, reify-bool {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 649, :column 12, :end-line 649, :end-column 22, :private true, :arglists (quote ([statement]))}, :private true, :name clojure.math.combinatorics/reify-bool, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 22, :method-params ([statement]), :protocol-impl nil, :arglists-meta (nil nil), :column 5, :line 649, :end-line 649, :max-fixed-arity 1, :fn-var true, :arglists (quote ([statement]))}, count-subsets-unmemoized {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 510, :column 8, :end-line 510, :end-column 32, :private true, :arglists (quote ([items]))}, :private true, :name clojure.math.combinatorics/count-subsets-unmemoized, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 32, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 510, :end-line 510, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items]))}, lex-partitions-H {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 710, :column 8, :end-line 710, :end-column 24, :private true, :arglists (quote ([N & {from :min, to :max}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(N {from :min, to :max})], :arglists ([N & {from :min, to :max}]), :arglists-meta (nil)}}, :private true, :name clojure.math.combinatorics/lex-partitions-H, :variadic true, :file "target/app/clojure/math/combinatorics.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(N {from :min, to :max})], :arglists ([N & {from :min, to :max}]), :arglists-meta (nil)}, :method-params [(N {from :min, to :max})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 710, :end-line 710, :max-fixed-arity 1, :fn-var true, :arglists ([N & {from :min, to :max}])}, nth-combination-distinct {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 525, :column 8, :end-line 525, :end-column 32, :private true, :arglists (quote ([items t n])), :doc "The nth element of the sequence of t-combinations of items,\nwhere items is a collection of distinct elements"}, :private true, :name clojure.math.combinatorics/nth-combination-distinct, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 32, :method-params ([items t n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 525, :end-line 525, :max-fixed-arity 3, :fn-var true, :arglists (quote ([items t n])), :doc "The nth element of the sequence of t-combinations of items,\nwhere items is a collection of distinct elements"}, drop-permutations {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 437, :column 7, :end-line 437, :end-column 24, :arglists (quote ([items n])), :doc "(drop n (permutations items)) but calculated more directly."}, :name clojure.math.combinatorics/drop-permutations, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 24, :method-params ([items n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 437, :end-line 437, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items n])), :doc "(drop n (permutations items)) but calculated more directly."}, factorial-numbers {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 304, :column 8, :end-line 304, :end-column 25, :private true, :arglists (quote ([n])), :doc "Input is a non-negative base 10 integer, output is the number in the\nfactorial number system (http://en.wikipedia.org/wiki/Factorial_number_system)\nexpressed as a list of 'digits'"}, :private true, :name clojure.math.combinatorics/factorial-numbers, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 25, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Input is a non-negative base 10 integer, output is the number in the\nfactorial number system (http://en.wikipedia.org/wiki/Factorial_number_system)\nexpressed as a list of 'digits'"}, count-combinations {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 496, :column 7, :end-line 496, :end-column 25, :arglists (quote ([items t])), :doc "(count (combinations items t)) but computed more directly"}, :name clojure.math.combinatorics/count-combinations, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 25, :method-params ([items t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 496, :end-line 496, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items t])), :doc "(count (combinations items t)) but computed more directly"}, m5 {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 834, :column 8, :end-line 834, :end-column 10, :private true, :arglists (quote ([n m f c u v a b l r s]))}, :private true, :name clojure.math.combinatorics/m5, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 10, :method-params ([n m f c u v a b l r s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 834, :end-line 834, :max-fixed-arity 11, :fn-var true, :arglists (quote ([n m f c u v a b l r s]))}, cartesian-product {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 208, :column 7, :end-line 208, :end-column 24, :arglists (quote ([& seqs])), :doc "All the ways to take one item from each sequence", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(seqs)], :arglists ([& seqs]), :arglists-meta (nil)}}, :name clojure.math.combinatorics/cartesian-product, :variadic true, :file "target/app/clojure/math/combinatorics.cljc", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(seqs)], :arglists ([& seqs]), :arglists-meta (nil)}, :method-params [(seqs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 0, :fn-var true, :arglists ([& seqs]), :doc "All the ways to take one item from each sequence"}, permutations {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 280, :column 7, :end-line 280, :end-column 19, :arglists (quote ([items])), :doc "All the distinct permutations of items, lexicographic by index \n(special handling for duplicate items)."}, :name clojure.math.combinatorics/permutations, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 19, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :doc "All the distinct permutations of items, lexicographic by index \n(special handling for duplicate items)."}, initial-perm-numbers {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 352, :column 8, :end-line 352, :end-column 28, :private true, :arglists (quote ([freqs])), :doc "Takes a sorted frequency map and returns how far into the sequence of\nlexicographic permutations you get by varying the first item"}, :private true, :name clojure.math.combinatorics/initial-perm-numbers, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 28, :method-params ([freqs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 352, :end-line 352, :max-fixed-arity 1, :fn-var true, :arglists (quote ([freqs])), :doc "Takes a sorted frequency map and returns how far into the sequence of\nlexicographic permutations you get by varying the first item"}, count-subsets {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 518, :column 7, :end-line 518, :end-column 20, :arglists (quote ([items])), :doc "(count (subsets items)) but computed more directly"}, :name clojure.math.combinatorics/count-subsets, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 20, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 518, :end-line 518, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :doc "(count (subsets items)) but computed more directly"}, factorial-numbers-with-duplicates {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 389, :column 8, :end-line 389, :end-column 41, :private true, :arglists (quote ([n freqs])), :doc "Input is a non-negative base 10 integer n, and a sorted frequency map freqs.\nOutput is a list of 'digits' in this wacky duplicate factorial number system"}, :private true, :name clojure.math.combinatorics/factorial-numbers-with-duplicates, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 41, :method-params ([n freqs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 389, :end-line 389, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n freqs])), :doc "Input is a non-negative base 10 integer n, and a sorted frequency map freqs.\nOutput is a list of 'digits' in this wacky duplicate factorial number system"}, init {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 652, :column 8, :end-line 652, :end-column 12, :private true, :arglists (quote ([n s]))}, :private true, :name clojure.math.combinatorics/init, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 12, :method-params ([n s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 652, :end-line 652, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n s]))}, selections {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 228, :column 7, :end-line 228, :end-column 17, :arglists (quote ([items n])), :doc "All the ways of taking n (possibly the same) elements from the sequence of items"}, :name clojure.math.combinatorics/selections, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 17, :method-params ([items n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items n])), :doc "All the ways of taking n (possibly the same) elements from the sequence of items"}, factorial {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 299, :column 8, :end-line 299, :end-column 17, :private true, :arglists (quote ([n]))}, :private true, :name clojure.math.combinatorics/factorial, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 17, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, dec-key {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 384, :column 8, :end-line 384, :end-column 15, :private true, :arglists (quote ([m k]))}, :private true, :name clojure.math.combinatorics/dec-key, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 15, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 384, :end-line 384, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, lex-permutations {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 252, :column 8, :end-line 252, :end-column 24, :private true, :arglists (quote ([c])), :doc "DEPRECATED as a public function.\n\nIn prior versions of the combinatorics library, there were two similar functions: permutations and lex-permutations.  It was a source of confusion to know which to call.  Now, you can always call permutations.  When appropriate (i.e., when you pass in a sorted sequence of numbers), permutations will automatically call lex-permutations as a speed optimization.", :deprecated "1.3"}, :private true, :name clojure.math.combinatorics/lex-permutations, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 24, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :deprecated "1.3", :end-line 252, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "DEPRECATED as a public function.\n\nIn prior versions of the combinatorics library, there were two similar functions: permutations and lex-permutations.  It was a source of confusion to know which to call.  Now, you can always call permutations.  When appropriate (i.e., when you pass in a sorted sequence of numbers), permutations will automatically call lex-permutations as a speed optimization."}, sorted-numbers? {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 264, :column 8, :end-line 264, :end-column 23, :private true, :arglists (quote ([s])), :doc "Returns true iff s is a sequence of numbers in non-decreasing order"}, :private true, :name clojure.math.combinatorics/sorted-numbers?, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 23, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true iff s is a sequence of numbers in non-decreasing order"}, index-combinations {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 92, :column 8, :end-line 92, :end-column 26, :private true, :arglists (quote ([n cnt]))}, :private true, :name clojure.math.combinatorics/index-combinations, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 26, :method-params ([n cnt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n cnt]))}, count-permutations {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 345, :column 7, :end-line 345, :end-column 25, :arglists (quote ([l])), :doc "Counts the number of distinct permutations of l"}, :name clojure.math.combinatorics/count-permutations, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 25, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 345, :end-line 345, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l])), :doc "Counts the number of distinct permutations of l"}, vec-lex-permutations {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 249, :column 8, :end-line 249, :end-column 28, :private true, :arglists (quote ([v]))}, :private true, :name clojure.math.combinatorics/vec-lex-permutations, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 28, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 249, :end-line 249, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, list-index {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 588, :column 8, :end-line 588, :end-column 18, :private true, :arglists (quote ([l item])), :doc "The opposite of nth, i.e., from an item in a list, find the n"}, :private true, :name clojure.math.combinatorics/list-index, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 18, :method-params ([l item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 588, :end-line 588, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l item])), :doc "The opposite of nth, i.e., from an item in a list, find the n"}, combinations {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 177, :column 7, :end-line 177, :end-column 19, :arglists (quote ([items t])), :doc "All the unique ways of taking t different elements from items"}, :name clojure.math.combinatorics/combinations, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 19, :method-params ([items t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items t])), :doc "All the unique ways of taking t different elements from items"}, count-combinations-unmemoized {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 488, :column 8, :end-line 488, :end-column 37, :private true, :arglists (quote ([items t])), :doc "We need an internal version that doesn't memoize each call to count-combinations-from-frequencies\nso that we can memoize over a series of calls."}, :private true, :name clojure.math.combinatorics/count-combinations-unmemoized, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 37, :method-params ([items t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 488, :end-line 488, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items t])), :doc "We need an internal version that doesn't memoize each call to count-combinations-from-frequencies\nso that we can memoize over a series of calls."}, iter-perm {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 234, :column 8, :end-line 234, :end-column 17, :private true, :arglists (quote ([v]))}, :private true, :name clojure.math.combinatorics/iter-perm, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 17, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, update {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 639, :column 8, :end-line 639, :end-column 14, :private true, :arglists (quote ([vec index f]))}, :private true, :name clojure.math.combinatorics/update, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 14, :method-params ([vec index f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 639, :end-line 639, :max-fixed-arity 3, :fn-var true, :arglists (quote ([vec index f]))}, *' {:name clojure.math.combinatorics/*', :file "target/app/clojure/math/combinatorics.cljc", :line 81, :column 10, :end-line 81, :end-column 17, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 81, :column 15, :end-line 81, :end-column 17}}, next-distribution {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 126, :column 8, :end-line 126, :end-column 25, :private true, :arglists (quote ([m total distribution]))}, :private true, :name clojure.math.combinatorics/next-distribution, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 25, :method-params ([m total distribution]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m total distribution]))}, index-remainder {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 368, :column 8, :end-line 368, :end-column 23, :private true, :arglists (quote ([perm-numbers n])), :doc "Finds the index and remainder from the initial-perm-numbers."}, :private true, :name clojure.math.combinatorics/index-remainder, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 23, :method-params ([perm-numbers n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 2, :fn-var true, :arglists (quote ([perm-numbers n])), :doc "Finds the index and remainder from the initial-perm-numbers."}, distribute {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 112, :column 8, :end-line 112, :end-column 18, :private true, :arglists (quote ([m index total distribution already-distributed]))}, :private true, :name clojure.math.combinatorics/distribute, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 18, :method-params ([m index total distribution already-distributed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 5, :fn-var true, :arglists (quote ([m index total distribution already-distributed]))}, count-combinations-from-frequencies {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 473, :column 25, :end-line 473, :end-column 60, :dynamic true, :private true, :arglists (quote ([freqs t]))}, :private true, :name clojure.math.combinatorics/count-combinations-from-frequencies, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 60, :method-params ([freqs t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :dynamic true, :line 473, :end-line 473, :max-fixed-arity 2, :fn-var true, :arglists (quote ([freqs t]))}, multi-perm {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 270, :column 8, :end-line 270, :end-column 18, :private true, :arglists (quote ([l])), :doc "Handles the case when you want the permutations of a list with duplicate items."}, :private true, :name clojure.math.combinatorics/multi-perm, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 18, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l])), :doc "Handles the case when you want the permutations of a list with duplicate items."}, nth-permutation-distinct {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 321, :column 8, :end-line 321, :end-column 32, :private true, :arglists (quote ([l n])), :doc "Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"}, :private true, :name clojure.math.combinatorics/nth-permutation-distinct, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 32, :method-params ([l n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 321, :end-line 321, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l n])), :doc "Input should be a sorted sequential collection l of distinct items, \noutput is nth-permutation (0-based)"}, nth-subset {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 573, :column 7, :end-line 573, :end-column 17, :arglists (quote ([items n]))}, :name clojure.math.combinatorics/nth-subset, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 17, :method-params ([items n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 573, :end-line 573, :max-fixed-arity 2, :fn-var true, :arglists (quote ([items n]))}, subsets {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 202, :column 7, :end-line 202, :end-column 14, :arglists (quote ([items])), :doc "All the subsets of items"}, :name clojure.math.combinatorics/subsets, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 14, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :doc "All the subsets of items"}, m6 {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 871, :column 8, :end-line 871, :end-column 10, :private true, :arglists (quote ([n m f c u v a b l r s]))}, :private true, :name clojure.math.combinatorics/m6, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 10, :method-params ([n m f c u v a b l r s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 871, :end-line 871, :max-fixed-arity 11, :fn-var true, :arglists (quote ([n m f c u v a b l r s]))}, multi-comb {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 164, :column 8, :end-line 164, :end-column 18, :private true, :arglists (quote ([l t])), :doc "Handles the case when you want the combinations of a list with duplicate items."}, :private true, :name clojure.math.combinatorics/multi-comb, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 18, :method-params ([l t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l t])), :doc "Handles the case when you want the combinations of a list with duplicate items."}, multiset-partitions-M {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 772, :column 8, :end-line 772, :end-column 29, :private true, :arglists (quote ([multiset r s] [n m f c u v a b l r s])), :top-fn {:variadic false, :max-fixed-arity 11, :method-params ([multiset r s] [n m f c u v a b l r s]), :arglists ([multiset r s] [n m f c u v a b l r s]), :arglists-meta (nil nil)}}, :private true, :name clojure.math.combinatorics/multiset-partitions-M, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 11, :method-params ([multiset r s] [n m f c u v a b l r s]), :arglists ([multiset r s] [n m f c u v a b l r s]), :arglists-meta (nil nil)}, :method-params ([multiset r s] [n m f c u v a b l r s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 772, :end-line 772, :max-fixed-arity 11, :fn-var true, :arglists ([multiset r s] [n m f c u v a b l r s])}, bounded-distributions {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 153, :column 8, :end-line 153, :end-column 29, :private true, :arglists (quote ([m t]))}, :private true, :name clojure.math.combinatorics/bounded-distributions, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 29, :method-params ([m t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m t]))}, unchunk {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 190, :column 8, :end-line 190, :end-column 15, :private true, :arglists (quote ([s])), :doc "Given a sequence that may have chunks, return a sequence that is 1-at-a-time\nlazy with no chunks. Chunks are good for efficiency when the data items are\nsmall, but when being processed via map, for example, a reference is kept to\nevery function result in the chunk until the entire chunk has been processed,\nwhich increases the amount of memory in use that cannot be garbage\ncollected."}, :private true, :name clojure.math.combinatorics/unchunk, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Given a sequence that may have chunks, return a sequence that is 1-at-a-time\nlazy with no chunks. Chunks are good for efficiency when the data items are\nsmall, but when being processed via map, for example, a reference is kept to\nevery function result in the chunk until the entire chunk has been processed,\nwhich increases the amount of memory in use that cannot be garbage\ncollected."}, permutation-index {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/clojure/math/combinatorics.cljc", :line 614, :column 7, :end-line 614, :end-column 24, :arglists (quote ([items])), :doc "Input must be a sortable collection of items.  Returns the n such that\n    (nth-permutation (sort items) n) is items."}, :name clojure.math.combinatorics/permutation-index, :variadic false, :file "target/app/clojure/math/combinatorics.cljc", :end-column 24, :method-params ([items]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 614, :end-line 614, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items])), :doc "Input must be a sortable collection of items.  Returns the n such that\n    (nth-permutation (sort items) n) is items."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:min :else :max}, :order [:else :min :max]}, :doc "Efficient, functional algorithms for generating lazy\nsequences for common combinatorial functions. (See the source code \nfor a longer description.)"}