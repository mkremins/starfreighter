{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name starfreighter.cards, :imports nil, :requires {starfreighter.cards.bar starfreighter.cards.bar, gambling starfreighter.cards.gambling, space starfreighter.cards.space, starfreighter.cards.gambling starfreighter.cards.gambling, rand starfreighter.rand, db starfreighter.db, starfreighter.cards.space starfreighter.cards.space, loans starfreighter.cards.loans, bar starfreighter.cards.bar, util starfreighter.util, starfreighter.cards.loans starfreighter.cards.loans, starfreighter.util starfreighter.util, starfreighter.rand starfreighter.rand, starfreighter.db starfreighter.db, port starfreighter.cards.port, starfreighter.cards.port starfreighter.cards.port}, :uses nil, :defs {all-cards {:name starfreighter.cards/all-cards, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :line 17, :column 3, :end-line 17, :end-column 17, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :line 17, :column 8, :end-line 17, :end-column 17}}, interruptible? {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :line 20, :column 7, :end-line 20, :end-column 21, :arglists (quote ([card])), :doc "Returns whether a given `card` is interruptible – i.e. whether it's OK (both\n  gameplay- and narrative-wise) for the player to \"just walk away\" from the\n  situation the card represents, e.g. by initiating travel to another place."}, :name starfreighter.cards/interruptible?, :variadic false, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :end-column 21, :method-params ([card]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([card])), :doc "Returns whether a given `card` is interruptible – i.e. whether it's OK (both\n  gameplay- and narrative-wise) for the player to \"just walk away\" from the\n  situation the card represents, e.g. by initiating travel to another place."}, prepare-to-depart {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :line 33, :column 7, :end-line 33, :end-column 24, :arglists (quote ([state]))}, :name starfreighter.cards/prepare-to-depart, :variadic false, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :end-column 24, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, applicable-game-over-if-any {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :line 43, :column 7, :end-line 43, :end-column 34, :arglists (quote ([state]))}, :name starfreighter.cards/applicable-game-over-if-any, :variadic false, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :end-column 34, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, applicable-arrival-if-any {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :line 57, :column 7, :end-line 57, :end-column 32, :arglists (quote ([state]))}, :name starfreighter.cards/applicable-arrival-if-any, :variadic false, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :end-column 32, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, try-pick {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :line 83, :column 7, :end-line 83, :end-column 15, :arglists (quote ([state metacard]))}, :name starfreighter.cards/try-pick, :variadic false, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :end-column 15, :method-params ([state metacard]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state metacard]))}, draw-next-card {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :line 95, :column 7, :end-line 95, :end-column 21, :arglists (quote ([state]))}, :name starfreighter.cards/draw-next-card, :variadic false, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/cards.cljs", :end-column 21, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:deadly? :yes :earn :cargo :repeatable? :else :call :gen :name :deck :crew :type :completed-delivery :prereq :depart-for :card :ship :advance-time? :recent-picks :bound :weight :id :ok :next-card :info :add-memory :info-target :passenger? :game-over :pay :interruptible? :merchant :location :speaker :destination :yes-no :docked? :no :bind :text}, :order [:prereq :docked? :interruptible? :type :ok :yes :no :info-target :card :speaker :text :yes-no :name :depart-for :crew :game-over :location :ship :deadly? :else :passenger? :destination :cargo :info :call :earn :pay :merchant :add-memory :completed-delivery :repeatable? :recent-picks :id :bind :bound :next-card :deck :weight :gen :advance-time?]}, :doc nil}