{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name starfreighter.util, :imports nil, :requires nil, :uses nil, :defs {bucket {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :line 3, :column 7, :end-line 3, :end-column 13, :arglists (quote ([value threshold-bucket-pairs])), :doc "Given a numerical `value` and a seq of pairs `[threshold bucket]`, returns\n  the value of `bucket` for the first pair where `value` <= `threshold`."}, :name starfreighter.util/bucket, :variadic false, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :end-column 13, :method-params ([value threshold-bucket-pairs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 2, :fn-var true, :arglists (quote ([value threshold-bucket-pairs])), :doc "Given a numerical `value` and a seq of pairs `[threshold bucket]`, returns\n  the value of `bucket` for the first pair where `value` <= `threshold`."}, clamp {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :line 11, :column 7, :end-line 11, :end-column 12, :arglists (quote ([value lo hi]))}, :name starfreighter.util/clamp, :variadic false, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :end-column 12, :method-params ([value lo hi]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([value lo hi]))}, distinct-by {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :line 15, :column 7, :end-line 15, :end-column 18, :arglists (quote ([f] [f coll])), :doc "Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}}, :name starfreighter.util/distinct-by, :variadic false, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [f coll]), :arglists ([f] [f coll]), :arglists-meta (nil nil)}, :method-params ([f] [f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists ([f] [f coll]), :doc "Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f."}, error {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :line 42, :column 7, :end-line 42, :end-column 12, :arglists (quote ([& strs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(strs)], :arglists ([& strs]), :arglists-meta (nil)}}, :name starfreighter.util/error, :variadic true, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(strs)], :arglists ([& strs]), :arglists-meta (nil)}, :method-params [(strs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 0, :fn-var true, :arglists ([& strs])}, indexed-by {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :line 45, :column 7, :end-line 45, :end-column 17, :arglists (quote ([f coll])), :doc "Returns a map from `(f item)` to `item` for every `item` in `coll`."}, :name starfreighter.util/indexed-by, :variadic false, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :end-column 17, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll])), :doc "Returns a map from `(f item)` to `item` for every `item` in `coll`."}, pow-scale {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :line 50, :column 7, :end-line 50, :end-column 16, :arglists (quote ([exp n [old-min old-max] [new-min new-max]])), :doc "Converts the value `n` from a (presumably linear) scale `[old-min old-max]`\n  to the new scale `[new-min new-max]`, using a power function with exponent\n  `exp` to perform the conversion."}, :name starfreighter.util/pow-scale, :variadic false, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :end-column 16, :method-params ([exp n p__7563 p__7564]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 4, :fn-var true, :arglists (quote ([exp n [old-min old-max] [new-min new-max]])), :doc "Converts the value `n` from a (presumably linear) scale `[old-min old-max]`\n  to the new scale `[new-min new-max]`, using a power function with exponent\n  `exp` to perform the conversion."}, sift {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :line 59, :column 7, :end-line 59, :end-column 11, :arglists (quote ([pred coll]))}, :name starfreighter.util/sift, :variadic false, :file "/Users/mkremins/Projects/starfreighter/src/starfreighter/util.cljs", :end-column 11, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}}, :require-macros nil, :doc nil}