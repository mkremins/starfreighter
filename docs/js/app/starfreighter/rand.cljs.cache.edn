{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{rand-int rand-nth shuffle rand}, :name starfreighter.rand, :imports nil, :requires {rng rand-cljc.core, rand-cljc.core rand-cljc.core, util starfreighter.util, starfreighter.util starfreighter.util}, :uses nil, :defs {restrict {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 73, :column 7, :end-line 73, :end-column 15, :arglists (quote ([pred gen & args])), :doc "Repeatedly runs `gen`, a generator fn, until the output passes `pred`, then\n  returns the passing output. Extra `args`, if provided, are passed to `gen`.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(pred gen args)], :arglists ([pred gen & args]), :arglists-meta (nil)}}, :name starfreighter.rand/restrict, :variadic true, :file "src/starfreighter/rand.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(pred gen args)], :arglists ([pred gen & args]), :arglists-meta (nil)}, :method-params [(pred gen args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists ([pred gen & args]), :doc "Repeatedly runs `gen`, a generator fn, until the output passes `pred`, then\n  returns the passing output. Extra `args`, if provided, are passed to `gen`."}, biased-rand-nth {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 41, :column 7, :end-line 41, :end-column 22, :arglists (quote ([pool])), :doc "Like `clojure.core/rand-nth`, but biased towards earlier items in `pool`.\n  Borrowed from [Martin O'Leary](http://mewo2.com/notes/naming-language)."}, :name starfreighter.rand/biased-rand-nth, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 22, :method-params ([pool]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pool])), :doc "Like `clojure.core/rand-nth`, but biased towards earlier items in `pool`.\n  Borrowed from [Martin O'Leary](http://mewo2.com/notes/naming-language)."}, rand-int {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 23, :column 7, :end-line 23, :end-column 15, :arglists (quote ([n]))}, :name starfreighter.rand/rand-int, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 15, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, pick-n {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 56, :column 7, :end-line 56, :end-column 13, :arglists (quote ([n pool])), :doc "Randomly selects `n` items from `pool`, without replacement."}, :name starfreighter.rand/pick-n, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 13, :method-params ([n pool]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n pool])), :doc "Randomly selects `n` items from `pool`, without replacement."}, rand-nth {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 26, :column 7, :end-line 26, :end-column 15, :arglists (quote ([coll]))}, :name starfreighter.rand/rand-nth, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 15, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, shuffle {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 29, :column 7, :end-line 29, :end-column 14, :arglists (quote ([coll]))}, :name starfreighter.rand/shuffle, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, rng {:name starfreighter.rand/rng, :file "src/starfreighter/rand.cljs", :line 14, :column 1, :end-line 14, :end-column 9, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 14, :column 6, :end-line 14, :end-column 9}, :doc "Re-export the `rand-cljc.core/rng` RNG constructor fn so that consumers of\n  this namespace don't need to import it separately."}, shuffle-cycle {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 86, :column 7, :end-line 86, :end-column 20, :arglists (quote ([pool])), :doc "Returns an infinite lazy sequence of repetitions of the items in `pool`\n  (much like `clojure.core/cycle`), but randomizes the order of the items on\n  each iteration of the cycle (much like `clojure.core/shuffle`).\n\n  Useful when you have a finite pool to choose from and need an indefinite\n  number of items, but want to avoid repetition as much as possible. The items\n  in the pool will show up in a random order, but you're always guaranteed to\n  see each item exactly once before any of them are repeated."}, :name starfreighter.rand/shuffle-cycle, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 20, :method-params ([pool]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pool])), :doc "Returns an infinite lazy sequence of repetitions of the items in `pool`\n  (much like `clojure.core/cycle`), but randomizes the order of the items on\n  each iteration of the cycle (much like `clojure.core/shuffle`).\n\n  Useful when you have a finite pool to choose from and need an indefinite\n  number of items, but want to avoid repetition as much as possible. The items\n  in the pool will show up in a random order, but you're always guaranteed to\n  see each item exactly once before any of them are repeated."}, approx-normal-rand {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 34, :column 7, :end-line 34, :end-column 25, :arglists (quote ([] [n])), :doc "Returns approximately normally distributed random numbers between 0 and 1.\n  Uses the central limit theorem (averaging `n` uniform random variates, where\n  `n` defaults to 6).", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :name starfreighter.rand/approx-normal-rand, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists ([] [n]), :doc "Returns approximately normally distributed random numbers between 0 and 1.\n  Uses the central limit theorem (averaging `n` uniform random variates, where\n  `n` defaults to 6)."}, rand {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 19, :column 7, :end-line 19, :end-column 11, :arglists (quote ([] [n])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}}, :name starfreighter.rand/rand, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [n]), :arglists ([] [n]), :arglists-meta (nil nil)}, :method-params ([] [n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists ([] [n])}, pick-n-with-replacement {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 61, :column 7, :end-line 61, :end-column 30, :arglists (quote ([n pool])), :doc "Randomly selects `n` items from `pool`, with replacement."}, :name starfreighter.rand/pick-n-with-replacement, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 30, :method-params ([n pool]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n pool])), :doc "Randomly selects `n` items from `pool`, with replacement."}, unique-runs {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 99, :column 7, :end-line 99, :end-column 18, :arglists (quote ([n gen & args])), :doc "Repeatedly runs `gen`, a generator fn, until exactly `n` unique outputs have\n  been generated. Extra `args`, if provided, are passed to `gen`.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(n gen args)], :arglists ([n gen & args]), :arglists-meta (nil)}}, :name starfreighter.rand/unique-runs, :variadic true, :file "src/starfreighter/rand.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(n gen args)], :arglists ([n gen & args]), :arglists-meta (nil)}, :method-params [(n gen args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists ([n gen & args]), :doc "Repeatedly runs `gen`, a generator fn, until exactly `n` unique outputs have\n  been generated. Extra `args`, if provided, are passed to `gen`."}, restricted {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 80, :column 7, :end-line 80, :end-column 17, :arglists (quote ([pred gen])), :doc "Returns a generator fn that behaves like `gen`, but will only output values\n  that pass `pred`. Uses `restrict` internally."}, :name starfreighter.rand/restricted, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 17, :method-params ([pred gen]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred gen])), :doc "Returns a generator fn that behaves like `gen`, but will only output values\n  that pass `pred`. Uses `restrict` internally."}, *rng* {:name starfreighter.rand/*rng*, :file "src/starfreighter/rand.cljs", :line 9, :column 1, :end-line 9, :end-column 21, :dynamic true, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 9, :column 16, :end-line 9, :end-column 21, :dynamic true}, :doc "The current RNG for the entire game. For controllable randomness, can be\n  rebound to an RNG constructed with an explicit seed."}, rand-int* {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 66, :column 7, :end-line 66, :end-column 16, :arglists (quote ([n] [lo hi])), :doc "Like `clojure.core/rand-int`, but includes `n` in the range of possible\n  outputs. Can also be passed two arguments to get a random integer between\n  `lo` and `hi` (both inclusive).", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [lo hi]), :arglists ([n] [lo hi]), :arglists-meta (nil nil)}}, :name starfreighter.rand/rand-int*, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [lo hi]), :arglists ([n] [lo hi]), :arglists-meta (nil nil)}, :method-params ([n] [lo hi]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists ([n] [lo hi]), :doc "Like `clojure.core/rand-int`, but includes `n` in the range of possible\n  outputs. Can also be passed two arguments to get a random integer between\n  `lo` and `hi` (both inclusive)."}, chance {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 49, :column 7, :end-line 49, :end-column 13, :arglists (quote ([n] [m n])), :doc "Randomly returns either true (with probability `n`) or false (with\n  probability `(- 1 n)`). If passed two arguments, will have an `m` in `n`\n  chance of returning true.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [m n]), :arglists ([n] [m n]), :arglists-meta (nil nil)}}, :name starfreighter.rand/chance, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([n] [m n]), :arglists ([n] [m n]), :arglists-meta (nil nil)}, :method-params ([n] [m n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists ([n] [m n]), :doc "Randomly returns either true (with probability `n`) or false (with\n  probability `(- 1 n)`). If passed two arguments, will have an `m` in `n`\n  chance of returning true."}, weighted-choice {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 113, :column 7, :end-line 113, :end-column 22, :arglists (quote ([choices-with-weights])), :doc "Randomly selects a key from the map `choices-with-weights`. The likelihood\n  that a given key will be selected is determined by its weight, i.e. its\n  associated non-negative numeric value in the map."}, :name starfreighter.rand/weighted-choice, :variadic false, :file "src/starfreighter/rand.cljs", :end-column 22, :method-params ([choices-with-weights]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([choices-with-weights])), :doc "Randomly selects a key from the map `choices-with-weights`. The likelihood\n  that a given key will be selected is determined by its weight, i.e. its\n  associated non-negative numeric value in the map."}, unique-runs-by {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/rand.cljs", :line 105, :column 7, :end-line 105, :end-column 21, :arglists (quote ([f n gen & args])), :doc "Like a combination of `unique-runs` and the `medley.core/distinct-by` fn\n  from [Medley](https://github.com/weavejester/medley). Repeatedly runs `gen`,\n  a generator fn, until exactly `n` unique outputs have been generated, using\n  `f` to determine uniqueness. Extra `args`, if provided, are passed to `gen`.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(f n gen args)], :arglists ([f n gen & args]), :arglists-meta (nil)}}, :name starfreighter.rand/unique-runs-by, :variadic true, :file "src/starfreighter/rand.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(f n gen args)], :arglists ([f n gen & args]), :arglists-meta (nil)}, :method-params [(f n gen args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 3, :fn-var true, :arglists ([f n gen & args]), :doc "Like a combination of `unique-runs` and the `medley.core/distinct-by` fn\n  from [Medley](https://github.com/weavejester/medley). Repeatedly runs `gen`,\n  a generator fn, until exactly `n` unique outputs have been generated, using\n  `f` to determine uniqueness. Extra `args`, if provided, are passed to `gen`."}}, :require-macros nil, :doc "Various utilities for working with randomness and generator fns."}