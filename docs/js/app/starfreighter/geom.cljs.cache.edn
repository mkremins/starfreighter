{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name starfreighter.geom, :imports nil, :requires nil, :uses nil, :defs {deg->rad {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/geom.cljs", :line 3, :column 7, :end-line 3, :end-column 15, :arglists (quote ([deg]))}, :name starfreighter.geom/deg->rad, :variadic false, :file "src/starfreighter/geom.cljs", :end-column 15, :method-params ([deg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 1, :fn-var true, :arglists (quote ([deg]))}, rad->deg {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/geom.cljs", :line 6, :column 7, :end-line 6, :end-column 15, :arglists (quote ([rad]))}, :name starfreighter.geom/rad->deg, :variadic false, :file "src/starfreighter/geom.cljs", :end-column 15, :method-params ([rad]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rad]))}, sin {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/geom.cljs", :line 9, :column 7, :end-line 9, :end-column 10, :arglists (quote ([deg]))}, :name starfreighter.geom/sin, :variadic false, :file "src/starfreighter/geom.cljs", :end-column 10, :method-params ([deg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([deg]))}, cos {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/geom.cljs", :line 12, :column 7, :end-line 12, :end-column 10, :arglists (quote ([deg]))}, :name starfreighter.geom/cos, :variadic false, :file "src/starfreighter/geom.cljs", :end-column 10, :method-params ([deg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([deg]))}, square {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/geom.cljs", :line 15, :column 7, :end-line 15, :end-column 13, :arglists (quote ([n]))}, :name starfreighter.geom/square, :variadic false, :file "src/starfreighter/geom.cljs", :end-column 13, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, displace {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/geom.cljs", :line 18, :column 7, :end-line 18, :end-column 15, :arglists (quote ([point angle distance]))}, :name starfreighter.geom/displace, :variadic false, :file "src/starfreighter/geom.cljs", :end-column 15, :method-params ([point angle distance]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([point angle distance]))}, distance {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/geom.cljs", :line 22, :column 7, :end-line 22, :end-column 15, :arglists (quote ([{x1 :x, y1 :y} {x2 :x, y2 :y}]))}, :name starfreighter.geom/distance, :variadic false, :file "src/starfreighter/geom.cljs", :end-column 15, :method-params ([p__7533 p__7534]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{x1 :x, y1 :y} {x2 :x, y2 :y}]))}, interpolate {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/src/starfreighter/geom.cljs", :line 25, :column 7, :end-line 25, :end-column 18, :arglists (quote ([{x1 :x, y1 :y} {x2 :x, y2 :y} frac-dist]))}, :name starfreighter.geom/interpolate, :variadic false, :file "src/starfreighter/geom.cljs", :end-column 18, :method-params ([p__7543 p__7544 frac-dist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{x1 :x, y1 :y} {x2 :x, y2 :y} frac-dist]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :x}, :order [:x :y]}, :doc nil}