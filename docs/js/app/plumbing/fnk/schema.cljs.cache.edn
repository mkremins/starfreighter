{:rename-macros {}, :renames {}, :use-macros {assert-iae plumbing.fnk.schema}, :excludes #{}, :name plumbing.fnk.schema, :imports nil, :requires {s schema.core, schema.core schema.core, schema-utils schema.utils, schema.utils schema.utils}, :uses nil, :defs {required-toplevel-keys {:schema (schema.core/make-fn-schema output-schema10279 [input-schema10280]), :protocol-inline nil, :meta {:arglists (quote ([input-schema])), :file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 139, :column 9, :end-line 139, :end-column 31, :schema (schema.core/make-fn-schema output-schema10279 [input-schema10280]), :doc "Inputs: [input-schema :- InputSchema]\n  Returns: [s/Keyword]\n\n  Which top-level keys are required (i.e., non-false) by this input schema.", :raw-arglists (quote ([input-schema :- InputSchema]))}, :name plumbing.fnk.schema/required-toplevel-keys, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 31, :method-params ([G__10283]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([input-schema :- InputSchema])), :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-schema])), :doc "Inputs: [input-schema :- InputSchema]\n  Returns: [s/Keyword]\n\n  Which top-level keys are required (i.e., non-false) by this input schema."}, InputSchema {:name plumbing.fnk.schema/InputSchema, :file "target/app/plumbing/fnk/schema.cljs", :line 23, :column 1, :end-line 23, :end-column 17, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 23, :column 6, :end-line 23, :end-column 17}}, possibly-contains? {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 215, :column 7, :end-line 215, :end-column 25, :arglists (quote ([m k]))}, :name plumbing.fnk.schema/possibly-contains?, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 25, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, schema-key {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 206, :column 7, :end-line 206, :end-column 17, :arglists (quote ([m k]))}, :name plumbing.fnk.schema/schema-key, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 17, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, map-schema? {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 72, :column 7, :end-line 72, :end-column 18, :arglists (quote ([m]))}, :name plumbing.fnk.schema/map-schema?, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 18, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, MapOutputSchema {:name plumbing.fnk.schema/MapOutputSchema, :file "target/app/plumbing/fnk/schema.cljs", :line 28, :column 1, :end-line 28, :end-column 21, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 28, :column 6, :end-line 28, :end-column 21}}, unwrap-schema-form-key {:schema (schema.core/make-fn-schema output-schema10203 [input-schema10204]), :protocol-inline nil, :meta {:arglists (quote ([k])), :file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 79, :column 9, :end-line 79, :end-column 31, :schema (schema.core/make-fn-schema output-schema10203 [input-schema10204]), :doc "Inputs: [k]\n  Returns: (s/maybe (s/pair s/Keyword \"k\" s/Bool \"optional?\"))\n\n  Given a possibly-unevaluated schema map key form, unpack an explicit keyword\n   and optional? flag, or return nil for a non-explicit key", :raw-arglists (quote ([k]))}, :name plumbing.fnk.schema/unwrap-schema-form-key, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 31, :method-params ([G__10207]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([k])), :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Inputs: [k]\n  Returns: (s/maybe (s/pair s/Keyword \"k\" s/Bool \"optional?\"))\n\n  Given a possibly-unevaluated schema map key form, unpack an explicit keyword\n   and optional? flag, or return nil for a non-explicit key"}, non-map-union {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 60, :column 7, :end-line 60, :end-column 20, :arglists (quote ([s1 s2]))}, :name plumbing.fnk.schema/non-map-union, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 20, :method-params ([s1 s2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s1 s2]))}, split-schema-keys {:schema (schema.core/make-fn-schema output-schema10233 [input-schema10234]), :protocol-inline nil, :meta {:arglists (quote ([s])), :file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 100, :column 9, :end-line 100, :end-column 26, :schema (schema.core/make-fn-schema output-schema10233 [input-schema10234]), :doc "Inputs: [s :- {s/Keyword s/Bool}]\n  Returns: [(s/one [s/Keyword] (quote required)) (s/one [s/Keyword] (quote optional))]\n\n  Given output of explicit-schema-key-map, split into seq [req opt].", :raw-arglists (quote ([s :- {s/Keyword s/Bool}]))}, :name plumbing.fnk.schema/split-schema-keys, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 26, :method-params ([G__10237]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([s :- {s/Keyword s/Bool}])), :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Inputs: [s :- {s/Keyword s/Bool}]\n  Returns: [(s/one [s/Keyword] (quote required)) (s/one [s/Keyword] (quote optional))]\n\n  Given output of explicit-schema-key-map, split into seq [req opt]."}, explicit-schema-key-map {:schema (schema.core/make-fn-schema output-schema10218 [input-schema10219]), :protocol-inline nil, :meta {:arglists (quote ([s])), :file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 91, :column 9, :end-line 91, :end-column 32, :schema (schema.core/make-fn-schema output-schema10218 [input-schema10219]), :doc "Inputs: [s]\n  Returns: {s/Keyword s/Bool}\n\n  Given a possibly-unevaluated map schema, return a map from bare keyword to true\n   (for required) or false (for optional)", :raw-arglists (quote ([s]))}, :name plumbing.fnk.schema/explicit-schema-key-map, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 32, :method-params ([G__10222]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([s])), :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Inputs: [s]\n  Returns: {s/Keyword s/Bool}\n\n  Given a possibly-unevaluated map schema, return a map from bare keyword to true\n   (for required) or false (for optional)"}, schema-diff {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 164, :column 7, :end-line 164, :end-column 18, :arglists (quote ([input-schema output-schema])), :doc "Subtract output-schema from input-schema, returning nil if it's possible that an object\n   satisfying the output-schema satisfies the input-schema, or otherwise a description\n   of the part(s) of input-schema not met by output-schema.  Strict about the map structure\n   of output-schema matching input-schema, but loose about everything else (only looks at\n   required keys of output-schema."}, :name plumbing.fnk.schema/schema-diff, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 18, :method-params ([input-schema output-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists (quote ([input-schema output-schema])), :doc "Subtract output-schema from input-schema, returning nil if it's possible that an object\n   satisfying the output-schema satisfies the input-schema, or otherwise a description\n   of the part(s) of input-schema not met by output-schema.  Strict about the map structure\n   of output-schema matching input-schema, but loose about everything else (only looks at\n   required keys of output-schema."}, non-map-diff {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 66, :column 7, :end-line 66, :end-column 19, :arglists (quote ([s1 s2])), :doc "Return a difference of schmas s1 and s2, where one is not a map.\n   Punt for now, assuming s2 always satisfies s1."}, :name plumbing.fnk.schema/non-map-diff, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 19, :method-params ([s1 s2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s1 s2])), :doc "Return a difference of schmas s1 and s2, where one is not a map.\n   Punt for now, assuming s2 always satisfies s1."}, guess-expr-output-schema {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 153, :column 7, :end-line 153, :end-column 31, :arglists (quote ([expr])), :doc "Guess an output schema for an expr.  Currently just looks for literal map structure and\n   all keyword keys."}, :name plumbing.fnk.schema/guess-expr-output-schema, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 31, :method-params ([expr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([expr])), :doc "Guess an output schema for an expr.  Currently just looks for literal map structure and\n   all keyword keys."}, compose-schemata {:schema (schema.core/make-fn-schema output-schema10366 [input-schema10367]), :protocol-inline nil, :meta {:schema (schema.core/make-fn-schema output-schema10366 [input-schema10367]), :file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :end-column 43, :column 27, :raw-arglists (quote ([[i2 o2] :- IOSchemata [i1 o1] :- [(s/one InputSchema (quote input)) (s/one MapOutputSchema (quote output))]])), :line 196, :end-line 196, :arglists (quote ([[i2 o2] [i1 o1]])), :doc "Inputs: [[i2 o2] :- IOSchemata [i1 o1] :- [(s/one InputSchema (quote input)) (s/one MapOutputSchema (quote output))]]\n\n  Given pairs of input and output schemata for fnks f1 and f2,\n   return a pair of input and output schemata for #(f2 (merge % (f1 %))).\n   f1's output schema must not contain any optional keys.", :always-validate true}, :name plumbing.fnk.schema/compose-schemata, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 43, :method-params ([G__10370 G__10371]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([[i2 o2] :- IOSchemata [i1 o1] :- [(s/one InputSchema (quote input)) (s/one MapOutputSchema (quote output))]])), :line 196, :end-line 196, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[i2 o2] [i1 o1]])), :doc "Inputs: [[i2 o2] :- IOSchemata [i1 o1] :- [(s/one InputSchema (quote input)) (s/one MapOutputSchema (quote output))]]\n\n  Given pairs of input and output schemata for fnks f1 and f2,\n   return a pair of input and output schemata for #(f2 (merge % (f1 %))).\n   f1's output schema must not contain any optional keys.", :always-validate true}, assert-satisfies-schema {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 192, :column 7, :end-line 192, :end-column 30, :arglists (quote ([input-schema output-schema]))}, :name plumbing.fnk.schema/assert-satisfies-schema, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 30, :method-params ([input-schema output-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([input-schema output-schema]))}, split-schema {:schema (schema.core/make-fn-schema output-schema10422 [input-schema10423]), :protocol-inline nil, :meta {:arglists (quote ([s ks])), :file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 218, :column 9, :end-line 218, :end-column 21, :schema (schema.core/make-fn-schema output-schema10422 [input-schema10423]), :doc "Inputs: [s :- InputSchema ks :- [s/Keyword]]\n\n  Return a pair [ks-part non-ks-part], with any extra schema removed.", :raw-arglists (quote ([s :- InputSchema ks :- [s/Keyword]]))}, :name plumbing.fnk.schema/split-schema, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 21, :method-params ([G__10426 G__10427]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([s :- InputSchema ks :- [s/Keyword]])), :line 218, :end-line 218, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s ks])), :doc "Inputs: [s :- InputSchema ks :- [s/Keyword]]\n\n  Return a pair [ks-part non-ks-part], with any extra schema removed."}, assert-distinct {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 39, :column 7, :end-line 39, :end-column 22, :arglists (quote ([things])), :doc "Like (assert (distinct? things)) but with a more helpful error message."}, :name plumbing.fnk.schema/assert-distinct, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 22, :method-params ([things]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([things])), :doc "Like (assert (distinct? things)) but with a more helpful error message."}, OutputSchema {:name plumbing.fnk.schema/OutputSchema, :file "target/app/plumbing/fnk/schema.cljs", :line 24, :column 1, :end-line 24, :end-column 18, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 24, :column 6, :end-line 24, :end-column 18}}, GraphInputSchema {:name plumbing.fnk.schema/GraphInputSchema, :file "target/app/plumbing/fnk/schema.cljs", :line 27, :column 1, :end-line 27, :end-column 22, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 27, :column 6, :end-line 27, :end-column 22}}, GraphIOSchemata {:name plumbing.fnk.schema/GraphIOSchemata, :file "target/app/plumbing/fnk/schema.cljs", :line 29, :column 1, :end-line 29, :end-column 21, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 29, :column 6, :end-line 29, :end-column 21}}, merge-on-with {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 107, :column 8, :end-line 107, :end-column 21, :private true, :arglists (quote ([key-project key-combine val-combine & maps])), :doc "Like merge-with, but also projects keys to a smaller space and merges them similar to the\n   values.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(key-project key-combine val-combine maps)], :arglists ([key-project key-combine val-combine & maps]), :arglists-meta (nil)}}, :private true, :name plumbing.fnk.schema/merge-on-with, :variadic true, :file "target/app/plumbing/fnk/schema.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(key-project key-combine val-combine maps)], :arglists ([key-project key-combine val-combine & maps]), :arglists-meta (nil)}, :method-params [(key-project key-combine val-combine maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 3, :fn-var true, :arglists ([key-project key-combine val-combine & maps]), :doc "Like merge-with, but also projects keys to a smaller space and merges them similar to the\n   values."}, Schema {:name plumbing.fnk.schema/Schema, :file "target/app/plumbing/fnk/schema.cljs", :line 22, :column 1, :end-line 22, :end-column 12, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 22, :column 6, :end-line 22, :end-column 12}}, IOSchemata {:name plumbing.fnk.schema/IOSchemata, :file "target/app/plumbing/fnk/schema.cljs", :line 25, :column 1, :end-line 25, :end-column 16, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 25, :column 6, :end-line 25, :end-column 16}}, union-input-schemata {:schema (schema.core/make-fn-schema output-schema10263 [input-schema10264]), :protocol-inline nil, :meta {:arglists (quote ([i1 i2])), :file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 122, :column 9, :end-line 122, :end-column 29, :schema (schema.core/make-fn-schema output-schema10263 [input-schema10264]), :doc "Inputs: [i1 :- InputSchema i2 :- InputSchema]\n  Returns: InputSchema\n\n  Returns a minimal input schema schema that entails satisfaction of both s1 and s2", :raw-arglists (quote ([i1 :- InputSchema i2 :- InputSchema]))}, :name plumbing.fnk.schema/union-input-schemata, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 29, :method-params ([G__10267 G__10268]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([i1 :- InputSchema i2 :- InputSchema])), :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([i1 i2])), :doc "Inputs: [i1 :- InputSchema i2 :- InputSchema]\n  Returns: InputSchema\n\n  Returns a minimal input schema schema that entails satisfaction of both s1 and s2"}, sequence-schemata {:schema (schema.core/make-fn-schema output-schema10581 [input-schema10582]), :protocol-inline nil, :meta {:arglists (quote ([[i1 o1] [k [i2 o2]]])), :file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 228, :column 9, :end-line 228, :end-column 26, :schema (schema.core/make-fn-schema output-schema10581 [input-schema10582]), :doc "Inputs: [[i1 o1] :- GraphIOSchemata [k [i2 o2]] :- [(s/one s/Keyword \"key\") (s/one IOSchemata \"inner-schemas\")]]\n  Returns: GraphIOSchemata\n\n  Given pairs of input and output schemata for fnks f1 and f2, and a keyword k,\n   return a pair of input and output schemata for #(let [v1 (f1 %)] (assoc v1 k (f2 (merge-disjoint % v1))))", :raw-arglists (quote ([[i1 o1] :- GraphIOSchemata [k [i2 o2]] :- [(s/one s/Keyword "key") (s/one IOSchemata "inner-schemas")]]))}, :name plumbing.fnk.schema/sequence-schemata, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 26, :method-params ([G__10585 G__10586]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([[i1 o1] :- GraphIOSchemata [k [i2 o2]] :- [(s/one s/Keyword "key") (s/one IOSchemata "inner-schemas")]])), :line 228, :end-line 228, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[i1 o1] [k [i2 o2]]])), :doc "Inputs: [[i1 o1] :- GraphIOSchemata [k [i2 o2]] :- [(s/one s/Keyword \"key\") (s/one IOSchemata \"inner-schemas\")]]\n  Returns: GraphIOSchemata\n\n  Given pairs of input and output schemata for fnks f1 and f2, and a keyword k,\n   return a pair of input and output schemata for #(let [v1 (f1 %)] (assoc v1 k (f2 (merge-disjoint % v1))))"}, safe-get {:protocol-inline nil, :meta {:file "/Users/mkremins/Projects/starfreighter/target/app/plumbing/fnk/schema.cljs", :line 48, :column 7, :end-line 48, :end-column 15, :arglists (quote ([m k key-path])), :doc "Like (get m k), but throws if k is not present in m."}, :name plumbing.fnk.schema/safe-get, :variadic false, :file "target/app/plumbing/fnk/schema.cljs", :end-column 15, :method-params ([m k key-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m k key-path])), :doc "Like (get m k), but throws if k is not present in m."}}, :require-macros {schema-macros schema.macros, schema.macros schema.macros, plumbing.fnk.schema plumbing.fnk.schema, s schema.core, schema.core schema.core, schema-utils schema.utils, schema.utils schema.utils}, :cljs.analyzer/constants {:seen #{s/Keyword input schema.core/Any :schema required-toplevel-keys s/pair InputSchema i1 :schema.core/error :key arg1 required :else missing-required-key :does-not-satisfy-schema unwrap-schema-form-key :value map? :proto-sym split-schema-keys s/one :extra explicit-schema-key-map :type input-schema ks compose-schemata s/Bool s/Schema split-schema output schema.core/optional-key s k :error s/maybe quote arg0 :missing-key GraphIOSchemata :doc :failures optional :proto-pred :map union-input-schemata sequence-schemata i2 :always-validate}, :order [:proto-sym :proto-pred s/Schema input output :error :key :map :missing-key :else k :schema schema.core/Any unwrap-schema-form-key :doc s/maybe s/pair s/Keyword s/Bool :type :value :schema.core/error schema.core/optional-key s explicit-schema-key-map required optional split-schema-keys s/one quote i1 InputSchema i2 union-input-schemata :extra input-schema required-toplevel-keys map? missing-required-key :failures :does-not-satisfy-schema arg0 arg1 compose-schemata :always-validate ks split-schema sequence-schemata GraphIOSchemata]}, :doc "A very simple type system for a subset of schemas consisting of nested\n   maps with optional or required keyword keys; used by fnk and kin.\n\n   Since schemas are turing-complete and not really designed for type inference,\n   (and for simplicity) we err on the side of completeness (allowing all legal programs)\n   at the cost of soundness.\n\n   These operations also bake in some logic specific to reasoning about Graphs,\n   namely that all input keys to a node must be explicitly mentioned as optional or\n   required, or provided via `instance`, and will thus deliberately drop extra key\n   schemas on inputs as appropriate.  Output schemas may not have optional keys."}